// <auto-generated />
using System;
using MangaApi.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240113205527_Fifth")]
    partial class Fifth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MangaApi.Domain.Models.Manga.CollectionPage", b =>
                {
                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectionId");

                    b.ToTable("CollectionPages");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Manga.PageModel", b =>
                {
                    b.Property<int?>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PageNumber"));

                    b.Property<string>("CollectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionPageCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageNumber");

                    b.HasIndex("CollectionPageCollectionId");

                    b.ToTable("PageModels");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Mangas.Mangas", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionPageCollectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionPageCollectionId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Tags.TagsModel", b =>
                {
                    b.Property<string>("TagsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MangaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagsId");

                    b.HasIndex("MangasId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Users.UserModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRoles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersProfileModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UsersProfileModelId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Users.UsersProfile.UsersProfileModel", b =>
                {
                    b.Property<string>("UsersProfileModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserHasReadMangas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsersProfileModelId");

                    b.ToTable("UsersProfiles");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Manga.PageModel", b =>
                {
                    b.HasOne("MangaApi.Domain.Models.Manga.CollectionPage", null)
                        .WithMany("PageModels")
                        .HasForeignKey("CollectionPageCollectionId");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Mangas.Mangas", b =>
                {
                    b.HasOne("MangaApi.Domain.Models.Manga.CollectionPage", "CollectionPage")
                        .WithMany()
                        .HasForeignKey("CollectionPageCollectionId");

                    b.Navigation("CollectionPage");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Tags.TagsModel", b =>
                {
                    b.HasOne("MangaApi.Domain.Models.Mangas.Mangas", null)
                        .WithMany("TagsModel")
                        .HasForeignKey("MangasId");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Users.UserModel", b =>
                {
                    b.HasOne("MangaApi.Domain.Models.Users.UsersProfile.UsersProfileModel", "UsersProfileModel")
                        .WithMany()
                        .HasForeignKey("UsersProfileModelId");

                    b.Navigation("UsersProfileModel");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Manga.CollectionPage", b =>
                {
                    b.Navigation("PageModels");
                });

            modelBuilder.Entity("MangaApi.Domain.Models.Mangas.Mangas", b =>
                {
                    b.Navigation("TagsModel");
                });
#pragma warning restore 612, 618
        }
    }
}
